# Nome do seu workflow
name: Deploy Next.js App to Vercel Production

# Gatilhos do Workflow
on:
  # Dispara o workflow em cada push para o branch 'main'
  push:
    branches:
      - main # Garanta que este é o seu branch principal de produção
    # Esta condição evita que o workflow seja disparado por commits feitos pelo próprio bot
    # do GitHub Actions, prevenindo loops infinitos em caso de auto-commits.
    if: github.actor != 'github-actions[bot]'

  # Permite disparar o workflow manualmente pela interface do GitHub
  workflow_dispatch:

# Definição dos Jobs
jobs:
  deploy:
    runs-on: ubuntu-latest # O sistema operacional onde o job será executado

    # Variáveis de Ambiente para o Job (essenciais para Next.js e Vercel)
    env:
      # Variáveis para autenticação GitHub via NextAuth.js
      GITHUB_ID: ${{ secrets.GITHUB_ID }}
      GITHUB_SECRET: ${{ secrets.GITHUB_SECRET }}
      NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }} # URL de callback do GitHub OAuth App
      NEXTAUTH_SECRET: ${{ secrets.SECRET }} # Segredo criptográfico do NextAuth.js

      # Variáveis para o deploy na Vercel
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}       # ID da sua organização/usuário na Vercel
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }} # ID do seu projeto Vercel
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}         # Token de acesso pessoal da Vercel

    steps:
      # Passo 1: Checkout do Código
      # Utiliza uma ação para baixar o código do seu repositório
      - name: Checkout Code
        uses: actions/checkout@v4

      # Passo 2: Configuração do Node.js e Cache de Dependências
      # Utiliza uma ação para configurar o ambiente Node.js, crucial para projetos Next.js
      - name: Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Versão recomendada do Node.js para Next.js (ajuste se necessário)
          cache: 'npm'       # Habilita o cache de dependências do npm para builds mais rápidos

      # Passo 3: Instalação das Dependências
      # Este passo executa um comando de shell 'npm install'.
      # Não existe uma ação 'uses:' padrão e exclusiva para apenas 'npm install'
      # porque 'actions/setup-node' já prepara o ambiente para isso.
      - name: Install Dependencies
        run: npm install

      # --- ETAPAS DE QUALIDADE DE CÓDIGO E TESTES (Opcional, mas recomendado) ---

      # Passo 4: Rodar o Linter
      # Este passo executa um comando de shell 'npx eslint'.
      # Similar à instalação, não há uma ação 'uses:' padrão e exclusiva para apenas 'eslint'.
      - name: Run Linter for Code Quality
        run: npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings 0

      # Passo 5: Rodar Testes Unitários/Integração (se existirem)
      # Este passo executa um comando de shell.
      # Se você tiver uma ferramenta de teste específica com uma Action (ex: Jest, Cypress),
      # você poderia usar 'uses:' aqui. Caso contrário, 'run:' é o padrão.
      - name: Run Tests
        run: echo "Skipping tests, as no test command was provided." # Substitua esta linha pelo seu comando de teste
        continue-on-error: true # Permite que o workflow continue mesmo se os testes falharem (para demonstração)

      # --- ETAPA DE BUILD ---

      # Passo 6: Build do Projeto Next.js
      # Este passo executa um comando de shell 'npm run build'.
      # O build do Next.js é um comando específico do seu projeto, executado via 'npm'.
      # Não há uma ação 'uses:' padrão que faça apenas o 'npm run build' de forma genérica.
      - name: Build Next.js Application
        run: npm run build

      # --- ETAPA DE DEPLOY ---

      # Passo 7: Deploy para Vercel
      # Utiliza a ação oficial da Vercel para fazer o deploy do projeto
      - name: Deploy to Vercel Production
        uses: vercel/actions@v6 # Use a versão mais recente da ação Vercel (ou 'main' para a última)
        with:
          # Ação Vercel puxa automaticamente esses secrets do ambiente do job
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          org-id: ${{ secrets.VERCEL_ORG_ID }}
          project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          # Garante que o deploy seja para o ambiente de produção
          vercel-args: '--prod' 

      # --- ETAPAS PÓS-DEPLOY (Opcional) ---

      # Passo 8: Verificar Links Quebrados no Site Deployado
      # Utiliza uma ação para verificar links quebrados no site em produção
      - name: Check for Broken Links (Post-Deploy)
        uses: lycheeverse/lychee-action@v1.8.0 # Versão estável da ação Lychee
        with:
          # ATENÇÃO: Substitua pela URL REAL do seu projeto na Vercel (ex: https://seu-projeto.vercel.app/)
          args: "https://eng-soft-black.vercel.app/"
        continue-on-error: true # Permite que o workflow continue mesmo se links quebrados forem encontrados
